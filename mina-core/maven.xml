<project
  default="test"
  xmlns:define="jelly:define"
  xmlns:ant="jelly:ant"
  xmlns:doc="doc"
  xmlns:j="jelly:core"  
  xmlns:jxr="jxr"
  xmlns:maven="jelly:maven"
  xmlns:util="jelly:util">

  <preGoal name="java:compile">
    <ant:path id="my.other.src.dir" location="${basedir}/src/examples"/>
    <maven:addPath id="maven.compile.src.set" refid="my.other.src.dir"/>
  </preGoal>

  <postGoal name="maven-javadoc-plugin:register">
    <doc:registerReport 
      name="Example JavaDocs" 
      pluginName="maven-javadoc-plugin"
      link="apidocs-examples/index"
      target="_blank"
      description="Example JavaDoc API documentation."/>
  </postGoal>

  <postGoal name="maven-javadoc-plugin:report">
    <ant:copy todir="${basedir}/target/javadoc/src">
      <ant:fileset dir="${basedir}/src/java">
        <ant:include name="**/*.java" />
        <ant:include name="**/*.html" />
        <ant:include name="**/doc-files/**/*" />
      </ant:fileset>
    </ant:copy>
    <ant:javadoc
      packagenames="org.apache.mina.examples.*"
      sourcepath="${basedir}/src/examples"
      destdir="${maven.docs.dest}/apidocs-examples" />
  </postGoal>
  <postGoal name="maven-jxr-plugin:register">
    <doc:registerReport 
      name="Examples Xref" 
      pluginName="maven-jxr-plugin" 
      link="xref-examples/index"
      target="_blank"
      description="A set of browsable cross-referenced example sources."/>
  </postGoal>
  
  <postGoal name="maven-jxr-plugin:report">
    <maven:pluginVar var="javadocDestdir" plugin='maven-javadoc-plugin' property='maven.javadoc.destdir'/>
    <maven:pluginVar var="stylesheetPath" plugin='maven-jxr-plugin' property='maven.jxr.stylesheet'/>
    <maven:pluginVar var="templatePath" plugin='maven-jxr-plugin' property='maven.jxr.templateDir'/>

    <j:set var="maven.jxr.destdir.examples"
      value="${maven.docs.dest}/xref-examples" />

    <j:set var="copyright"
      value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved." />

    <j:set var="title" value="${pom.name} ${pom.currentVersion} Reference" />

    <ant:mkdir dir="${maven.jxr.destdir.examples}" />
    <ant:copy file="${stylesheetPath}"
      tofile="${maven.jxr.destdir.examples}/stylesheet.css"/>

    <jxr:jxr
      sourceDir="${basedir}/src/examples"
      destDir="${maven.jxr.destdir.examples}"
      templateDir="${templatePath}"
      javadocDir="${javadocDestdir}"
      windowTitle="${title}"
      docTitle="${title}"
      bottom="${copyright}">
    </jxr:jxr>
  </postGoal>

  <preGoal name="dist:build-src">
    <ant:copy todir="${maven.dist.src.assembly.dir}">
      <ant:fileset dir=".">
        <ant:include name="xdocs/**"/>
      </ant:fileset>
    </ant:copy>
  </preGoal>

  <preGoal name="dist:build-bin">
    <attainGoal name="site"/>
  </preGoal>

  <!-- EMMA Hooks -->
  <goal name="emma:backup-main">
    <ant:copy todir="${maven.build.dest}.orig">
      <ant:fileset dir="${maven.build.dest}"/>
    </ant:copy>
  </goal>
  <goal name="emma:backup-test">
    <ant:copy todir="${maven.test.dest}.orig">
      <ant:fileset dir="${maven.test.dest}"/>
    </ant:copy>
  </goal>

  <goal name="emma:restore-main">
    <ant:delete dir="${maven.build.dest}.emma"/>
    <ant:move todir="${maven.build.dest}.emma">
      <ant:fileset dir="${maven.build.dest}" />
    </ant:move>
    <ant:move todir="${maven.build.dest}">
      <ant:fileset dir="${maven.build.dest}.orig"/>
    </ant:move>
  </goal>
  <goal name="emma:restore-test">
    <ant:delete dir="${maven.test.dest}.emma"/>
    <ant:move todir="${maven.test.dest}.emma">
      <ant:fileset dir="${maven.test.dest}" />
    </ant:move>
    <ant:move todir="${maven.test.dest}">
      <ant:fileset dir="${maven.test.dest}.orig"/>
    </ant:move>
  </goal>

  <preGoal name="emma:replace-product-classes">
    <j:set var="maven.emma.inreport" value="${context.getVariable('maven.emma.inreport')}"/>
    <j:if test="${context.getVariable('maven.emma.inreport') != 'true'}">
      <attainGoal name="emma:backup-main"/>
    </j:if>
  </preGoal>
  <postGoal name="emma:replace-product-classes">
    <j:set var="maven.emma.inreport" value="${context.getVariable('maven.emma.inreport')}"/>
    <j:if test="${context.getVariable('maven.emma.inreport') != 'true'}">
      <attainGoal name="emma:restore-main"/>
    </j:if>
  </postGoal>

  <preGoal name="emma:replace-testing-classes">
    <j:set var="maven.emma.inreport" value="${context.getVariable('maven.emma.inreport')}"/>
    <j:if test="${context.getVariable('maven.emma.inreport') != 'true'}">
      <attainGoal name="emma:backup-test"/>
    </j:if>
  </preGoal>
  <postGoal name="emma:replace-testing-classes">
    <j:set var="maven.emma.inreport" value="${context.getVariable('maven.emma.inreport')}"/>
    <j:if test="${context.getVariable('maven.emma.inreport') != 'true'}">
      <attainGoal name="emma:restore-test"/>
    </j:if>
  </postGoal>

  <preGoal name="emma:realreport">
    <attainGoal name="test:compile"/>
    <attainGoal name="emma:backup-main"/>
    <attainGoal name="emma:backup-test"/>
    <echo>Turning on EMMA for report generation.</echo>
    <j:set var="maven.emma.inreport" value="true"/>
    <attainGoal name="emma:test-with-forced-fork"/>
  </preGoal>
  <postGoal name="emma:realreport">
    <j:set var="maven.emma.inreport" value="false"/>
    <echo>Turning off EMMA.</echo>
    <attainGoal name="emma:restore-main"/>
    <attainGoal name="emma:restore-test"/>
  </postGoal>
</project>
