/*
 *   Copyright 2004 The Apache Software Foundation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package org.apache.ldap.common.berlib.asn1.decoder.search;


import org.apache.ldap.common.berlib.asn1.decoder.testutils.RuleTestCase;
import org.apache.ldap.common.filter.BranchNode;
import org.apache.ldap.common.filter.BranchNormalizedVisitor;
import org.apache.ldap.common.filter.ExprNode;
import org.apache.ldap.common.filter.ExtensibleNode;
import org.apache.ldap.common.filter.FilterParserImpl;
import org.apache.ldap.common.filter.PresenceNode;
import org.apache.ldap.common.filter.SimpleNode;
import org.apache.ldap.common.filter.SubstringNode;
import org.apache.ldap.common.message.DerefAliasesEnum;
import org.apache.ldap.common.message.MessageTypeEnum;
import org.apache.ldap.common.message.ScopeEnum;
import org.apache.ldap.common.message.SearchRequest;
import org.apache.ldap.common.message.SearchRequestImpl;

import java.util.ArrayList;


/**
 * TODO: migrate to using pre-computed PDUs if possible
 *
 * Tests the capability to end to end decode a SearchRequest.
 * 
 * @author <a href="mailto:dev@directory.apache.org">Apache Directory
 * Project</a>
 * @version $Rev$
 */
public class SearchRequestTest extends RuleTestCase
{
    BranchNormalizedVisitor normalizer = null;


    protected void setUp() throws Exception
    {
        super.setUp();
        normalizer = new BranchNormalizedVisitor();
    }


    protected void tearDown() throws Exception
    {
        super.tearDown();
        normalizer = null;
    }


    private byte[] failingRequest0 = {
    0x30, 0x2e, 0x02, 0x01, 0x03, 0x63, 0x29, 0x04,
    0x09, 0x6f, 0x75, 0x3d, 0x73, 0x79, 0x73, 0x74,
    0x65, 0x6d, 0x0a, 0x01, 0x00, 0x0a, 0x01, 0x03,
    0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01,
    0x00, (byte) 0x87, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
    0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x00 };


    public void testFailingRequest0() throws Exception
    {
        SearchRequest req = ( SearchRequest ) decode( failingRequest0 );

        assertEquals( 3, req.getMessageId() );
        assertEquals( MessageTypeEnum.SEARCHREQUEST, req.getType() );
        assertEquals( 0, req.getSizeLimit() );
        assertEquals( 0, req.getTimeLimit() );
        assertEquals( "ou=system", req.getBase() );
        assertEquals( ScopeEnum.BASEOBJECT, req.getScope() );
        assertEquals( DerefAliasesEnum.DEREFALWAYS, req.getDerefAliases() );
        assertEquals( false, req.getTypesOnly() );

        assertTrue( req.getControls().isEmpty() );
        assertTrue( req.getAttributes().isEmpty() );
        assertEquals( "(objectClass=*)", req.getFilter().toString().trim() );
    }


    public void testFailingRequest0Twice() throws Exception
    {
        SearchRequest req = ( SearchRequest ) decode( failingRequest0 );
        assertEquals( 3, req.getMessageId() );
        assertEquals( MessageTypeEnum.SEARCHREQUEST, req.getType() );
        assertEquals( 0, req.getSizeLimit() );
        assertEquals( 0, req.getTimeLimit() );
        assertEquals( "ou=system", req.getBase() );
        assertEquals( ScopeEnum.BASEOBJECT, req.getScope() );
        assertEquals( DerefAliasesEnum.DEREFALWAYS, req.getDerefAliases() );
        assertEquals( false, req.getTypesOnly() );

        assertTrue( req.getControls().isEmpty() );
        assertTrue( req.getAttributes().isEmpty() );
        assertEquals( "(objectClass=*)", req.getFilter().toString().trim() );

        req = ( SearchRequest ) decode( failingRequest0 );
        assertEquals( 3, req.getMessageId() );
        assertEquals( MessageTypeEnum.SEARCHREQUEST, req.getType() );
        assertEquals( 0, req.getSizeLimit() );
        assertEquals( 0, req.getTimeLimit() );
        assertEquals( "ou=system", req.getBase() );
        assertEquals( ScopeEnum.BASEOBJECT, req.getScope() );
        assertEquals( DerefAliasesEnum.DEREFALWAYS, req.getDerefAliases() );
        assertEquals( false, req.getTypesOnly() );

        assertTrue( req.getControls().isEmpty() );
        assertTrue( req.getAttributes().isEmpty() );
        assertEquals( "(objectClass=*)", req.getFilter().toString().trim() );
    }

    public void testEqualityMatchFilter() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x55, 0x02, 0x01, 0x21, 0x63, 0x50, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( ou = Human Resources ) " ) ;
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    public void testGreaterOrEqualFilter() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x49, 0x02, 0x01, 0x21, 0x63, 0x44, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA5, 0x09, 0x04, 0x03, 0x61, 0x67, 0x65, 0x04, 0x02, 0x33, 0x30, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        expected.setFilter( new SimpleNode( "age", new byte[]{'3', '0'}, SimpleNode.GREATEREQ ) );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple lessOrEqual match
     * filter.
     */
    public void testLessOrEqualFilter() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x49, 0x02, 0x01, 0x21, 0x63, 0x44, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA6, 0x09, 0x04, 0x03, 0x61, 0x67, 0x65, 0x04, 0x02, 0x33, 0x30, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        expected.setFilter( new SimpleNode( "age", new byte[]{'3', '0'}, SimpleNode.LESSEQ ) );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple presence match filter.
     */
    public void testPresentFilter() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x4B, 0x02, 0x01, 0x21, 0x63, 0x46, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFF87, 0x0B, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        expected.setFilter( new PresenceNode( "objectClass" ) );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple approx match filter.
     */
    public void testApproxMatchFilter() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x53, 0x02, 0x01, 0x21, 0x63, 0x4E, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA8, 0x13, 0x04, 0x02, 0x63, 0x6E, 0x04, 0x0D, 0x41, 0x6C, 0x65, 0x78, 0x20, 0x4B, 0x61, 0x72, 0x61, 0x73, 0x75, 0x6C, 0x61, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode ( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        expected.setFilter( new SimpleNode( "cn", new byte[]{'A', 'l', 'e', 'x', ' ', 'K', 'a', 'r', 'a', 's', 'u', 'l', 'a'},
                SimpleNode.APPROXIMATE ) );

        assertEquals( expected, decoded );
    }

    public void testSubstringsFilter() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x65, 0x02, 0x01, 0x21, 0x63, 0x60, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA4, 0x25, 0x04, 0x02, 0x63, 0x6E, 0x30, 0x1F, 0xFFFFFF80, 0x08, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0xFFFFFF81, 0x05, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0xFFFFFF81, 0x06, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0xFFFFFF82, 0x04, 0x77, 0x78, 0x79, 0x7A, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        String any0 = "ijklm";
        String any1 = "nopqrs";
        ArrayList any = new ArrayList();
        any.add( any0 );
        any.add( any1 );
        SubstringNode node = new SubstringNode( any, "cn", "abcdefgh", "wxyz" );

        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple greaterOrEqual match filter.
     */
    public void testExtensibleMatch() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x51, 0x02, 0x01, 0x21, 0x63, 0x4C, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA9, 0x11, 0xFFFFFF81, 0x03, 0x31, 0x2E, 0x31, 0xFFFFFF82, 0x02, 0x63, 0x6E, 0xFFFFFF83, 0x03, 0x76, 0x61, 0x6C, 0xFFFFFF84, 0x01, 0xFFFFFFFF, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        ExtensibleNode node = new ExtensibleNode( "cn", new byte[]{'v', 'a', 'l'}, "1.1", true );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple equality match filter.
     */
    public void testNotFilter0() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x57, 0x02, 0x01, 0x21, 0x63, 0x52, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA2, 0x17, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( ! ( ou = Human Resources ) )" ) ;
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple equality match filter.
     */
    public void testNotFilter1() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x59, 0x02, 0x01, 0x21, 0x63, 0x54, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA2, 0x19, 0xFFFFFFA2, 0x17, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( !( ! ( ou = Human Resources ) ) )" ) ;
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    public void testAndFilter0() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x69, 0x02, 0x01, 0x21, 0x63, 0x64, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA0, 0x29, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0xFFFFFFA3, 0x10, 0x04, 0x01, 0x6C, 0x04, 0x0B, 0x53, 0x61, 0x6E, 0x74, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x72, 0x61, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        BranchNode node = null ;
        node = ( BranchNode ) parser.parse(
                "( & ( ou = Human Resources ) ( l=Santa Clara ) )" ) ;
        normalizer.visit( node );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    public void testAndFilter1() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x7B, 0x02, 0x01, 0x21, 0x63, 0x76, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA0, 0x3B, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0xFFFFFFA3, 0x10, 0x04, 0x03, 0x75, 0x69, 0x64, 0x04, 0x09, 0x61, 0x6B, 0x61, 0x72, 0x61, 0x73, 0x75, 0x6C, 0x75, 0xFFFFFFA3, 0x10, 0x04, 0x01, 0x6C, 0x04, 0x0B, 0x53, 0x61, 0x6E, 0x74, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x72, 0x61, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( & ( ou = Human Resources ) ( l=Santa Clara ) " +
                "( uid=akarasulu ) )" ) ;
        normalizer.visit( node );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple equality match filter.
     */
    public void testAndFilter2() throws Exception
    {
        byte[] pdu = {0x30, 0xFFFFFF81, 0xFFFFFF87, 0x02, 0x01, 0x21, 0x63, 0xFFFFFF81, 0xFFFFFF81, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA0, 0x46, 0xFFFFFFA3, 0x10, 0x04, 0x01, 0x6C, 0x04, 0x0B, 0x53, 0x61, 0x6E, 0x74, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x72, 0x61, 0xFFFFFFA3, 0x10, 0x04, 0x03, 0x75, 0x69, 0x64, 0x04, 0x09, 0x61, 0x6B, 0x61, 0x72, 0x61, 0x73, 0x75, 0x6C, 0x75, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0xFFFFFFA3, 0x09, 0x04, 0x02, 0x63, 0x6E, 0x04, 0x03, 0x61, 0x6F, 0x6B, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( & ( ou = Human Resources ) ( l=Santa Clara ) " +
                "( uid=akarasulu ) ( cn=aok ) )" ) ;
        normalizer.visit( node );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple equality match filter.
     */
    public void testAndFilter3() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0xFFFFFF81, 0xFFFFFF93, 0x02, 0x01, 0x21, 0x63, 0xFFFFFF81, 0xFFFFFF8D, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA0, 0x52, 0xFFFFFFA3, 0x10, 0x04, 0x03, 0x75, 0x69, 0x64, 0x04, 0x09, 0x61, 0x6B, 0x61, 0x72, 0x61, 0x73, 0x75, 0x6C, 0x75, 0xFFFFFFA3, 0x09, 0x04, 0x02, 0x63, 0x6E, 0x04, 0x03, 0x61, 0x6F, 0x6B, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0xFFFFFFA3, 0x10, 0x04, 0x01, 0x6C, 0x04, 0x0B, 0x53, 0x61, 0x6E, 0x74, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x72, 0x61, 0xFFFFFFA3, 0x0A, 0x04, 0x02, 0x63, 0x6E, 0x04, 0x04, 0x61, 0x62, 0x6F, 0x6B, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu  );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( & ( ou = Human Resources ) ( l=Santa Clara ) " +
                "( uid=akarasulu ) ( cn=aok ) ( cn=aok ) ( cn = abok) )" ) ;
        normalizer.visit( node );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    public void testOrFilter1() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0x7B, 0x02, 0x01, 0x21, 0x63, 0x76, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA1, 0x3B, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0xFFFFFFA3, 0x10, 0x04, 0x03, 0x75, 0x69, 0x64, 0x04, 0x09, 0x61, 0x6B, 0x61, 0x72, 0x61, 0x73, 0x75, 0x6C, 0x75, 0xFFFFFFA3, 0x10, 0x04, 0x01, 0x6C, 0x04, 0x0B, 0x53, 0x61, 0x6E, 0x74, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x72, 0x61, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( | ( ou = Human Resources ) ( l=Santa Clara ) " +
                "( uid=akarasulu ) )" ) ;
        normalizer.visit( node );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple equality match filter.
     */
    public void testOrFilter2() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0xFFFFFF81, 0xFFFFFF87, 0x02, 0x01, 0x21, 0x63, 0xFFFFFF81, 0xFFFFFF81, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA1, 0x46, 0xFFFFFFA3, 0x10, 0x04, 0x01, 0x6C, 0x04, 0x0B, 0x53, 0x61, 0x6E, 0x74, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x72, 0x61, 0xFFFFFFA3, 0x10, 0x04, 0x03, 0x75, 0x69, 0x64, 0x04, 0x09, 0x61, 0x6B, 0x61, 0x72, 0x61, 0x73, 0x75, 0x6C, 0x75, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0xFFFFFFA3, 0x09, 0x04, 0x02, 0x63, 0x6E, 0x04, 0x03, 0x61, 0x6F, 0x6B, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2 );
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( | ( ou = Human Resources ) ( l=Santa Clara ) " +
                "( uid=akarasulu ) ( cn=aok ) )" ) ;
        normalizer.visit( node );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }

    /**
     * Tests an search request decode with a simple equality match filter.
     */
    public void testOrFilter3() throws Exception
    {
        byte[] pdu = new byte[] {0x30, 0xFFFFFF81, 0xFFFFFF93, 0x02, 0x01, 0x21, 0x63, 0xFFFFFF81, 0xFFFFFF8D, 0x04, 0x11, 0x64, 0x63, 0x3D, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x2C, 0x64, 0x63, 0x3D, 0x63, 0x6F, 0x6D, 0x0A, 0x01, 0x00, 0x0A, 0x01, 0x02, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x01, 0x01, 0xFFFFFFFF, 0xFFFFFFA1, 0x52, 0xFFFFFFA3, 0x10, 0x04, 0x03, 0x75, 0x69, 0x64, 0x04, 0x09, 0x61, 0x6B, 0x61, 0x72, 0x61, 0x73, 0x75, 0x6C, 0x75, 0xFFFFFFA3, 0x09, 0x04, 0x02, 0x63, 0x6E, 0x04, 0x03, 0x61, 0x6F, 0x6B, 0xFFFFFFA3, 0x15, 0x04, 0x02, 0x6F, 0x75, 0x04, 0x0F, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x73, 0xFFFFFFA3, 0x10, 0x04, 0x01, 0x6C, 0x04, 0x0B, 0x53, 0x61, 0x6E, 0x74, 0x61, 0x20, 0x43, 0x6C, 0x61, 0x72, 0x61, 0xFFFFFFA3, 0x0A, 0x04, 0x02, 0x63, 0x6E, 0x04, 0x04, 0x61, 0x62, 0x6F, 0x6B, 0x30, 0x15, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x30, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x31, 0x04, 0x05, 0x61, 0x74, 0x74, 0x72, 0x32};
        SearchRequest decoded = ( SearchRequest ) decode( pdu );

        SearchRequestImpl expected = new SearchRequestImpl( 33 );
        expected.setBase( "dc=example,dc=com" );
        expected.setDerefAliases( DerefAliasesEnum.DEREFFINDINGBASEOBJ );
        expected.setScope( ScopeEnum.BASEOBJECT );
        expected.setSizeLimit( 2);
        expected.setTimeLimit( 3 );
        expected.setTypesOnly( true );

        expected.addAttribute( "attr0" );
        expected.addAttribute( "attr1" );
        expected.addAttribute( "attr2" );

        FilterParserImpl parser = new FilterParserImpl();
        ExprNode node = null ;
        node = parser.parse(
                "( | ( ou = Human Resources ) ( l=Santa Clara ) " +
                "( uid=akarasulu ) ( cn=aok ) ( cn=aok ) ( cn = abok) )" ) ;
        normalizer.visit( node );
        expected.setFilter( node );

        assertEquals( expected, decoded );
    }
}
